package test;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * A basic template for a GUI application with a menu bar and internal widgets.
 */
public class WidgetApp extends JFrame implements ActionListener {

    // A counter to give each new widget a unique title
    private int widgetCount = 0;
    
    // JDesktopPane is the key component for holding JInternalFrames
    private JDesktopPane desktopPane;

    // Menu items
    private JMenuItem addWidgetMenuItem;
    private JMenuItem helpMenuItem;

    public WidgetApp() {
        // --- Set up the main window (JFrame) ---
        setTitle("Widget Manager");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null); // Center the window

        // Create the JDesktopPane and set it as the content pane
        desktopPane = new JDesktopPane();
        setContentPane(desktopPane);

        // --- Create the menu bar and menus ---
        JMenuBar menuBar = new JMenuBar();
        
        // File Menu
        JMenu fileMenu = new JMenu("File");
        addWidgetMenuItem = new JMenuItem("Add Widget");
        addWidgetMenuItem.addActionListener(this);
        fileMenu.add(addWidgetMenuItem);

        // Edit Menu
        JMenu editMenu = new JMenu("Edit");
        JMenuItem editPlaceholder = new JMenuItem("Edit Widgets (Not yet implemented)");
        editMenu.add(editPlaceholder); // Placeholder for future functionality

        // Help Menu
        JMenu helpMenu = new JMenu("Help");
        helpMenuItem = new JMenuItem("Help");
        helpMenuItem.addActionListener(this);
        helpMenu.add(helpMenuItem);

        // Add menus to the menu bar
        menuBar.add(fileMenu);
        menuBar.add(editMenu);
        menuBar.add(helpMenu);

        // Set the menu bar for the frame
        setJMenuBar(menuBar);

        // Display the frame
        setVisible(true);
    }

    /**
     * Handles action events from the menu items.
     *
     * @param e The ActionEvent generated by a menu click.
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == addWidgetMenuItem) {
            addNewWidget();
        } else if (e.getSource() == helpMenuItem) {
            showHelpMessage();
        }
    }

    /**
     * Creates and adds a new movable JInternalFrame (the widget) to the desktop pane.
     */
    private void addNewWidget() {
        widgetCount++;
        JInternalFrame widget = new JInternalFrame("Widget " + widgetCount, true, true, true, true);
        
        // Set the initial size and location of the widget
        widget.setSize(300, 200);
        widget.setLocation(50 + (widgetCount * 20), 50 + (widgetCount * 20));
        
        // Add some content to the widget's panel
        JPanel panel = new JPanel();
        panel.add(new JLabel("This is a new widget!"));
        widget.add(panel);

        // Add the widget to the desktop pane and show it
        desktopPane.add(widget);
        widget.setVisible(true);
    }

    /**
     * Displays a message dialog with help information.
     */
    private void showHelpMessage() {
        String message = "This is a simple widget manager application.\n" +
                         "For more help, visit: https://www.example.com";
        JOptionPane.showMessageDialog(this, message, "Help", JOptionPane.INFORMATION_MESSAGE);
    }

    public static void main(String[] args) {
        // Use SwingUtilities.invokeLater to ensure the GUI is created on the Event Dispatch Thread
        SwingUtilities.invokeLater(() -> new WidgetApp());
    }
}